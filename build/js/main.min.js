/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ios-vh-fix */ "./js/utils/ios-vh-fix.js");
/* harmony import */ var _modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/modals/init-modals */ "./js/modules/modals/init-modals.js");
/* harmony import */ var _modules_form_validate_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/form-validate/form */ "./js/modules/form-validate/form.js");
/* harmony import */ var _modules_select_custom_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/select/custom-select */ "./js/modules/select/custom-select.js");
/* harmony import */ var _modules_init_event_calendar_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/init-event-calendar.js */ "./js/modules/init-event-calendar.js");






// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  Object(_utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__["iosVhFix"])();

  // Modules
  // ---------------------------------

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    Object(_modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__["initModals"])();
    var select = new _modules_select_custom_select__WEBPACK_IMPORTED_MODULE_3__["CustomSelect"]();
    select.init();
    var form = new _modules_form_validate_form__WEBPACK_IMPORTED_MODULE_2__["Form"]();
    window.form = form;
    form.init();
    Object(_modules_init_event_calendar_js__WEBPACK_IMPORTED_MODULE_4__["initEventCalendar"])();
  });
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

/***/ }),

/***/ "./js/modules/calendar/calendar-layout.js":
/*!************************************************!*\
  !*** ./js/modules/calendar/calendar-layout.js ***!
  \************************************************/
/*! exports provided: CalendarLayout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalendarLayout", function() { return CalendarLayout; });
/* harmony import */ var _calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar */ "./js/modules/calendar/calendar.js");
/* harmony import */ var _utils_render__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/render */ "./js/utils/render.js");
/* harmony import */ var _markup_main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./markup/main */ "./js/modules/calendar/markup/main.js");
/* harmony import */ var _markup_header__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./markup/header */ "./js/modules/calendar/markup/header.js");
/* harmony import */ var _markup_weekdays__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./markup/weekdays */ "./js/modules/calendar/markup/weekdays.js");
/* harmony import */ var _markup_days__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./markup/days */ "./js/modules/calendar/markup/days.js");
/* harmony import */ var _markup_sidebar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./markup/sidebar */ "./js/modules/calendar/markup/sidebar.js");
/* harmony import */ var _get_events__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./get-events */ "./js/modules/calendar/get-events.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }








var CalendarLayout = /*#__PURE__*/function () {
  function CalendarLayout(_ref) {
    var calendar = _ref.calendar,
      element = _ref.element,
      adjuster = _ref.adjuster;
    _classCallCheck(this, CalendarLayout);
    this.DAYS_COUNT = 42;
    this.initialized = false;
    this.calendar = calendar;
    this.element = element;
    this.adjuster = adjuster;
    this.dataLoaded = false;
    this._calendarLocale = calendar.options.locale;
    this.isChangeLocale = false;
    this.onMouseOver = this.onMouseOver.bind(this);
    this.onMouseOut = this.onMouseOut.bind(this);
    this.onClick = this.onClick.bind(this);
    this.onSidebarMonthClick = this.onSidebarMonthClick.bind(this);
    this.onLoadEvents = this.onLoadEvents.bind(this);
    this.createCalendar();
  }
  _createClass(CalendarLayout, [{
    key: "addListener",
    value: function addListener() {
      this.element.addEventListener('mouseover', this.onMouseOver);
      this.element.addEventListener('mouseout', this.onMouseOut);
      this.element.addEventListener('click', this.onClick);
      this.element.addEventListener('loadDataSuccess', this.onLoadEvents);
    }

    /* --== HEADER START ==-- */
  }, {
    key: "addNavigation",
    value: function addNavigation() {
      var setup = {
        navigation: this.calendar.options.navigation
      };
      var headerElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_header__WEBPACK_IMPORTED_MODULE_3__["createHeaderTemplate"])(setup));
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(this.mainSection, headerElement);
    }
  }, {
    key: "headerSoftChange",
    value: function headerSoftChange() {
      var monthLabelElement = this.element.querySelector('.event-calendar__month');
      var yearLabelElement = this.element.querySelector('.event-calendar__year');
      if (monthLabelElement && this.calendar.options.header.showMonth) {
        monthLabelElement.innerText = this.calendar.monthsLocale[this.calendar.selected.month];
      }
      if (yearLabelElement && this.calendar.options.header.showYear) {
        yearLabelElement.innerText = this.calendar.selected.year;
      }
    }
  }, {
    key: "addHeader",
    value: function addHeader() {
      var container = this.mainSection;
      var headerElement = this.element.querySelector('.event-calendar__header');

      // Если хедер уже существует просто обновляется текстовый контент
      if (headerElement) {
        this.headerSoftChange();
        return;
      }
      var setup = {
        monthYear: {
          month: this.calendar.options.header.showMonth && this.calendar.monthsLocale[this.calendar.selected.month],
          year: this.calendar.options.header.showYear && this.calendar.selected.year
        },
        navigation: this.calendar.options.header.showNavigation && this.calendar.options.navigation
      };
      headerElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_header__WEBPACK_IMPORTED_MODULE_3__["createHeaderTemplate"])(setup));
      if (!this.calendar.options.header.secondPosition) {
        container = this.element.querySelector('.event-calendar');
      }
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(container, headerElement, 'afterbegin');
    }
    /* --== HEADER END ==-- */

    /* --== MAIN START ==-- */
  }, {
    key: "addWeekdays",
    value: function addWeekdays() {
      var weekdaysList = [];
      var _iterator = _createForOfIteratorHelper(this.calendar.weekLocale),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var label = _step.value;
          var weekdaySetup = {
            label: label
          };
          weekdaysList.push(weekdaySetup);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var labelsListElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_weekdays__WEBPACK_IMPORTED_MODULE_4__["createWeekdaysTemplate"])({
        list: weekdaysList
      }));
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(this.mainSection, labelsListElement);
    }
  }, {
    key: "addDays",
    value: function addDays() {
      this.daysList = [];
      for (var index = 0; index < this.DAYS_COUNT; index++) {
        var daySetup = {
          isPrev: false,
          isNext: false,
          isCurrent: false,
          isWeekend: false,
          isToday: false,
          date: new Date()
        };
        var dayNumber = 0;
        var isPrevDay = index < this.calendar.selected.firstDay;
        var isCurrentDay = !isPrevDay && index < this.calendar.selected.firstDay + this.calendar.selected.days;

        // Дни предыдущего месяца
        if (isPrevDay) {
          daySetup.isPrev = true;
          dayNumber = this.calendar.prev.days - this.calendar.selected.firstDay + (index + 1);
          daySetup.date = new Date(this.calendar.selected.year, this.calendar.selected.month - 1, dayNumber);
        } else if (isCurrentDay) {
          daySetup.isCurrent = true;
          dayNumber = index + 1 - this.calendar.selected.firstDay;
          daySetup.date = new Date(this.calendar.selected.year, this.calendar.selected.month, dayNumber);
        } else {
          daySetup.isNext = true;
          dayNumber = index + 1 - (this.calendar.selected.firstDay + this.calendar.selected.days);
          daySetup.date = new Date(this.calendar.selected.year, this.calendar.selected.month + 1, dayNumber);
        }

        // Сегодняшний день
        if (daySetup.date.getTime() === this.calendar.today.getTime()) {
          daySetup.isToday = true;
        }
        if (index % 7 === this.calendar.weekends[0] || index % 7 === this.calendar.weekends[1]) {
          daySetup.isWeekend = true;
        }
        this.daysList.push(daySetup);
      }
      this.daysListElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_days__WEBPACK_IMPORTED_MODULE_5__["createDaysTemplate"])({
        days: this.daysList
      }));
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(this.mainSection, this.daysListElement);
    }
    /* --== MAIN END ==-- */

    /* --== SIDEBAR START ==-- */
  }, {
    key: "sidebarFillMonthsSetup",
    value: function sidebarFillMonthsSetup() {
      var _this = this;
      this.currentMonths = [];
      this.calendar.monthsLocale.forEach(function (label, i) {
        var monthSetup = {
          date: new Date(_this.calendar.selected.year, i),
          label: _this.calendar.options.sidebar.shortMonthLabel ? label.substring(0, 3) : label,
          index: i,
          isCurrent: false,
          isSelected: false
        };
        if (i === _this.calendar.today.getMonth() && _this.calendar.selected.year === _this.calendar.today.year) {
          monthSetup.isCurrent = true;
        }
        if (i === _this.calendar.selected.month) {
          monthSetup.isSelected = true;
        }
        _this.currentMonths.push(monthSetup);
      });
    }
  }, {
    key: "sidebarMonthListSoftChange",
    value: function sidebarMonthListSoftChange(sidebarElement) {
      var _this2 = this;
      // смена месяца без смены года
      var prevSelectedMonth = sidebarElement.querySelector('.event-calendar__month--selected');
      var newSelectedMonth = sidebarElement.querySelector("[data-idx='".concat(this.calendar.selected.month, "']"));
      if (prevSelectedMonth !== newSelectedMonth) {
        prevSelectedMonth.classList.remove('event-calendar__month--selected');
        newSelectedMonth.classList.add('event-calendar__month--selected');
      }

      // Если менялись локализация
      if (this.isChangeLocale) {
        this.currentMonths.forEach(function (month, i) {
          var monthElement = sidebarElement.querySelector("[data-idx='".concat(i, "']"));
          month.label = _this2.calendar.monthsLocale[i];
          monthElement.textContent = month.label;
        });
        this.isChangeLocale = false;
      }
    }
  }, {
    key: "sidebarMonthListHardChange",
    value: function sidebarMonthListHardChange(sidebarElement) {
      // если текущий год изменился, месяцы перерисовываются
      var monthsWrapElement = sidebarElement.querySelector('.event-calendar__months-wrap');
      monthsWrapElement.innerHTML = '';
      this.sidebarFillMonthsSetup();
      var monthsListElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_sidebar__WEBPACK_IMPORTED_MODULE_6__["createSidebarListTemplate"])({
        items: this.currentMonths
      }));
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(monthsWrapElement, monthsListElement);
    }
  }, {
    key: "addSidebar",
    value: function addSidebar(isYearChange) {
      var container = this.element.querySelector('.event-calendar__body');
      var sidebarElement = this.element.querySelector('.event-calendar__sidebar');
      if (sidebarElement) {
        if (isYearChange) {
          this.sidebarMonthListHardChange(sidebarElement);
        } else {
          this.sidebarMonthListSoftChange(sidebarElement);
        }
        return;
      }
      this.sidebarFillMonthsSetup();
      var setup = {
        navigation: this.calendar.options.sidebar.showNavigation && this.calendar.options.navigation,
        months: {
          items: this.currentMonths
        }
      };
      sidebarElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_sidebar__WEBPACK_IMPORTED_MODULE_6__["createSidebarTemplate"])(setup));
      sidebarElement.addEventListener('click', this.onSidebarMonthClick);
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(container, sidebarElement);
    }
    /* --== SIDEBAR END ==-- */

    /* --== METHODS START ==-- */
  }, {
    key: "getEvents",
    value: function getEvents(url) {
      Object(_get_events__WEBPACK_IMPORTED_MODULE_7__["getCalendarDataEvents"])(url, this);
    }
  }, {
    key: "offsetEventsTooltip",
    value: function offsetEventsTooltip(evt) {
      var eventDay = evt.target.closest('.event-calendar__day--event');
      if (!eventDay) {
        return;
      }
      var vw = document.documentElement.clientWidth;
      var eventsElement = eventDay.querySelector('.event-calendar__events');
      var wrapBoxCrd = eventsElement.getBoundingClientRect();
      if (wrapBoxCrd.width >= vw) {
        // смещение тултипа с событиями если он не помещается в окна просмотра
        eventsElement.style.width = "".concat(vw - Number(this.calendar.options.tooltipOffsetFromEdge) * 2, "px");
        wrapBoxCrd = eventsElement.getBoundingClientRect();
        eventsElement.style.left = "".concat(vw - (wrapBoxCrd.x + wrapBoxCrd.width) - Number(this.calendar.options.tooltipOffsetFromEdge), "px");
      } else if (!(vw - (wrapBoxCrd.x + wrapBoxCrd.width) > 0)) {
        // смещение тултипа если он выходит за край окна просмотра
        eventsElement.style.left = "".concat(vw - (wrapBoxCrd.x + wrapBoxCrd.width) - Number(this.calendar.options.tooltipOffsetFromEdge), "px");
      }
    }
  }, {
    key: "resetOffsetEventsTooltip",
    value: function resetOffsetEventsTooltip(evt) {
      var eventDay = evt.target.closest('.event-calendar__day--event');
      if (!eventDay) {
        return;
      }
      var eventsElement = eventDay.querySelector('.event-calendar__events');
      eventsElement.style.width = null;
      eventsElement.style.left = null;
    }
  }, {
    key: "changeCalendar",
    value: function changeCalendar(calendar, adjuster) {
      // Метод, который совершает перерисовку календаря.
      // adjuster - принимает положительно или отрицательное число, регулирует в каком направлении
      // двигаться по тайм-лайну от текущего: -1 - прошлый месяц, 1 - следующий месяц.

      if (adjuster !== void 0) {
        // перерысовывает календарь с новой датой
        var newOptions = Object.assign(calendar.options, {
          locale: this._calendarLocale
        });
        var newDate = new Date(calendar.selected.year, calendar.selected.month + adjuster, 1);
        this.calendar = new _calendar__WEBPACK_IMPORTED_MODULE_0__["Calendar"]({
          model: calendar.model,
          options: newOptions,
          date: newDate
        });
        this.daysListElement.remove();
        if ((calendar.selected.month + adjuster > 11 || calendar.selected.month + adjuster < 0) && this.calendar.options.sidebar) {
          this.addSidebar(true);
        }
      } else {
        // Срабатывает при первичной инициализации или при обновлении через this.changeCalendar(this.calendar);
        this.calendar.locale = this._calendarLocale;
        this.mainSection.innerHTML = null;
        this.addWeekdays();
        if (!this.calendar.options.header && this.calendar.options.navigation) {
          // Добавляет контролы навигации когда шапки нет, а навигация должна быть
          this.addNavigation();
        }
      }
      if (this.calendar.options.header) {
        this.addHeader();
      }
      if (this.calendar.options.sidebar) {
        this.addSidebar();
      }
      this.addDays();
      if (this.dataLoaded) {
        this.addJsonEvents();
      }
    }
  }, {
    key: "addJsonEvents",
    value: function addJsonEvents() {
      var currentDays = document.querySelectorAll('.event-calendar__day');
      for (var i = 0; i < this.calendar.model.length; i++) {
        // Добавляет события к дням
        for (var n = 0; n < this.DAYS_COUNT; n++) {
          var evDate = new Date(new Date(this.calendar.model[i].datetime).getFullYear(), new Date(this.calendar.model[i].datetime).getMonth(), new Date(this.calendar.model[i].datetime).getDate());
          var toDate = this.daysList[n].date;
          if (evDate.getTime() === toDate.getTime()) {
            var day = currentDays[n];
            var inner = day.querySelector('.event-calendar__events');
            day.classList.add('event-calendar__day--event');
            day.setAttribute('tabindex', '0');
            var eventElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_days__WEBPACK_IMPORTED_MODULE_5__["createDayEventTemplate"])(this.calendar.model[i]));
            Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(inner, eventElement);
          }
        }
        if (this.calendar.options.sidebar.showEventsInfo) {
          // Добавляет информацию о событиях в боковом меню
          for (var j = 0; j < this.currentMonths.length; j++) {
            var monthObj = this.currentMonths[j];
            monthObj.eventsCount = 0;
            for (var _n = 0; _n < this.calendar.model.length; _n++) {
              var _evDate = new Date(new Date(this.calendar.model[_n].datetime).getFullYear(), new Date(this.calendar.model[_n].datetime).getMonth());
              var _toDate = new Date(this.currentMonths[j].date);
              if (_evDate.getTime() === _toDate.getTime()) {
                monthObj.eventsCount++;
                var monthElement = this.element.querySelector("[data-idx='".concat(j, "']"));
                monthElement.setAttribute('data-event-count', monthObj.eventsCount);
                monthElement.classList.add('event-calendar__month--event');
              }
            }
          }
        }
      }
    }
  }, {
    key: "createCalendar",
    value: function createCalendar() {
      // Метод, который совершает первичную отрисовку
      if (this.initialized) {
        return;
      }
      this.initialized = true;
      this.element.innerHTML = null;
      this.calendarElement = Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["createElement"])(Object(_markup_main__WEBPACK_IMPORTED_MODULE_2__["createCalendarTemplate"])());
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_1__["renderElement"])(this.element, this.calendarElement);
      this.mainSection = this.element.querySelector('.event-calendar__main');
      this.changeCalendar(this.calendar);
      this.getEvents();
      this.addListener();
    }
    /* --== METHODS END ==-- */

    /* --== LISTENERS START ==-- */
  }, {
    key: "onMouseOver",
    value: function onMouseOver(evt) {
      this.offsetEventsTooltip(evt);
      if (this.calendar.options.addActiveClassOnHoverEvent) {
        this.onEventDayHover(evt);
      }
    }
  }, {
    key: "onEventDayHover",
    value: function onEventDayHover(evt) {
      var eventDay = evt.target.closest('.event-calendar__day--event');
      if (!eventDay) {
        return;
      }
      eventDay.classList.add('is-hover');
    }
  }, {
    key: "onMouseOut",
    value: function onMouseOut(evt) {
      if (this.calendar.options.addActiveClassOnHoverEvent) {
        this.onEventDayHoverBlur(evt);
      }
      this.resetOffsetEventsTooltip(evt);
    }
  }, {
    key: "onEventDayHoverBlur",
    value: function onEventDayHoverBlur(evt) {
      var eventDay = evt.target.closest('.event-calendar__day--event');
      if (!eventDay) {
        return;
      }
      eventDay.classList.remove('is-hover');
    }
  }, {
    key: "onSidebarMonthClick",
    value: function onSidebarMonthClick(evt) {
      var monthItem = evt.target.closest('[data-idx]');
      if (!monthItem) {
        return;
      }
      var adj = null;
      if (Number(monthItem.dataset.idx) >= this.calendar.selected.month) {
        adj = monthItem.dataset.idx - this.calendar.selected.month;
      } else if (this.calendar.selected.month >= Number(monthItem.dataset.idx)) {
        adj = (this.calendar.selected.month - monthItem.dataset.idx) * -1;
      }
      var selectedMonth = evt.currentTarget.querySelector('.event-calendar__month--selected');
      if (selectedMonth) {
        selectedMonth.classList.remove('event-calendar__month--selected');
        monthItem.classList.add('event-calendar__month--selected');
      }
      this.changeCalendar(this.calendar, adj);
    }
  }, {
    key: "onEventDayClick",
    value: function onEventDayClick(evt) {
      var eventDay = evt.target.closest('.event-calendar__day--event');
      var activeDay = document.querySelector('.event-calendar__day--event.is-active');
      var onMissClick = function onMissClick() {
        if (eventDay) {
          return;
        }
        var activeItems = document.querySelectorAll('.event-calendar__day.is-active');
        activeItems.forEach(function (it) {
          it.classList.remove('.is-active');
        });
        window.removeEventListener('click', onMissClick);
      };
      if (activeDay) {
        activeDay.classList.remove('is-active');
      }
      if (!eventDay) {
        return;
      }
      eventDay.classList.add('is-active');
      window.addEventListener('click', onMissClick);
    }
  }, {
    key: "onNavArrowsClick",
    value: function onNavArrowsClick(evt) {
      var target = evt.target;
      if (!target.closest('.event-calendar__nav-btn')) {
        return;
      }
      var adjuster = target.closest('.event-calendar__nav-btn--prev') ? -1 : 1;
      this.changeCalendar(this.calendar, adjuster);
    }
  }, {
    key: "onClick",
    value: function onClick(evt) {
      if (this.calendar.options.addActiveClassOnClickEvent) {
        this.onEventDayClick(evt);
      }
      this.onNavArrowsClick(evt);
    }
  }, {
    key: "onLoadEvents",
    value: function onLoadEvents() {
      this.dataLoaded = true;
      this.addJsonEvents();

      // Обновляет состояние календаря при загрузке новых событий не меняя выбранный месяц
      this.changeCalendar(this.calendar, 0);
    }
    /* --== LISTENERS END ==-- */
  }]);
  return CalendarLayout;
}();

/***/ }),

/***/ "./js/modules/calendar/calendar.js":
/*!*****************************************!*\
  !*** ./js/modules/calendar/calendar.js ***!
  \*****************************************/
/*! exports provided: Calendar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calendar", function() { return Calendar; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*
  За основу взят этот репозиторий
  https://github.com/jackducasse/caleandar

  дока
  https://www.notion.so/htmlacademy/30a5ef53a2db48048524a1004bec3c4e
*/

var Calendar = /*#__PURE__*/function () {
  function Calendar(_ref) {
    var model = _ref.model,
      options = _ref.options,
      date = _ref.date;
    _classCallCheck(this, Calendar);
    // массив с данными для отображения
    this.model = model;
    // Значения по умолчанию
    this.options = Object.assign({
      // Отобразить шапку
      header: true,
      // Отобразить месяцы сбоку
      sidebar: true,
      // Отобразить навигацию
      navigation: true,
      // Локализация
      locale: 'RU',
      // Горизонтальный отступ от края области просмотра у тултипа
      tooltipOffsetFromEdge: 20,
      // Добавляет класс is-hover при наведении на день с событием(возможно будет нужно для доп. стилизации и тд.)
      addActiveClassOnHoverEvent: false,
      // Добавляет класс is-active при клике на день с событием(возможно будет нужно для доп. стилизации и тд.)
      addActiveClassOnClickEvent: false
    }, options);
    if (this.options.header && _typeof(this.options.header) === 'object' || Boolean(this.options.header)) {
      this.options.header = Object.assign({
        // Если нужно отображать год
        showYear: true,
        // Если нужно отображать месяц
        showMonth: true,
        // показывать ли контролы навигации
        showNavigation: true,
        // второе расположение для шапки
        secondPosition: false
      }, options.header);
    }
    if (this.options.sidebar && _typeof(this.options.sidebar) === 'object' || Boolean(this.options.sidebar)) {
      this.options.sidebar = Object.assign({
        // короткая запись месяца (первые 3 буквы)
        shortMonthLabel: false,
        // показывать ли контролы навигации
        showNavigation: false,
        // показывать ли информацию о событиях в месяце
        showEventsInfo: true
      }, options.sidebar);
    }
    if (this.options.navigation && _typeof(this.options.navigation) === 'object' || Boolean(this.options.navigation)) {
      this.options.navigation = Object.assign({
        prev: {
          arialabel: 'Предыдущий месяц',
          text: '',
          icon: '<svg height="15" width="15" viewBox="0 0 100 75"><polyline points="0,0 100,0 50,75" fill="currentColor"></polyline></svg>'
        },
        next: {
          arialabel: 'Следующий месяц',
          text: '',
          icon: '<svg height="15" width="15" viewBox="0 0 100 75"><polyline points="0,0 100,0 50,75" fill="currentColor"></polyline></svg>'
        }
      }, options.navigation);
    }
    this.today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());
    this.selected = date || this.today;
    this.today.month = this.today.getMonth();
    this.today.year = this.today.getFullYear();
    this.selected.year = this.selected.getFullYear();
    this.selected.month = this.selected.getMonth();
    this.selected.days = new Date(this.selected.year, this.selected.month + 1, 0).getDate();
    this.prev = new Date(this.selected.year, this.selected.month - 1, 1);
    if (this.selected.month === 0) {
      this.prev = new Date(this.selected.year - 1, 11, 1);
    }
    this.prev.days = new Date(this.prev.getFullYear(), this.prev.getMonth() + 1, 0).getDate();
    this.locale = this.options.locale;
  }
  _createClass(Calendar, [{
    key: "locale",
    get: function get() {
      return this._locale;
    },
    set: function set(code) {
      // Здесь можно указать настройки для локали (названия месяцев, дней недели и первый день недели)
      code = code.toUpperCase();
      this._locale = code;
      switch (code) {
        case 'RU':
          // третьим аргументом передать 0 - если первый день недели Пн, 1 - если Вск
          this.selected.firstDay = new Date(this.selected.year, this.selected.month, 0).getDay();
          // третьим аргументом передать -1 - если первый день недели Пн, 0 - если Вск
          this.selected.lastDay = new Date(this.selected.year, this.selected.month + 1, -1).getDay();
          this.monthsLocale = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
          this.weekLocale = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];
          this.weekends = [5, 6];
          break;
        case 'EN':
          this.selected.firstDay = new Date(this.selected.year, this.selected.month, 1).getDay();
          this.selected.lastDay = new Date(this.selected.year, this.selected.month + 1, 0).getDay();
          this.monthsLocale = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          this.weekLocale = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
          this.weekends = [0, 6];
          break;
        default:
          this.selected.firstDay = new Date(this.selected.year, this.selected.month, 1).getDay();
          this.selected.lastDay = new Date(this.selected.year, this.selected.month + 1, 0).getDay();
          this.monthsLocale = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          this.weekLocale = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
          this.weekends = [0, 6];
          break;
      }
    }
  }]);
  return Calendar;
}();

/***/ }),

/***/ "./js/modules/calendar/event-calendar.js":
/*!***********************************************!*\
  !*** ./js/modules/calendar/event-calendar.js ***!
  \***********************************************/
/*! exports provided: EventCalendar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventCalendar", function() { return EventCalendar; });
/* harmony import */ var _calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar */ "./js/modules/calendar/calendar.js");
/* harmony import */ var _calendar_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendar-layout */ "./js/modules/calendar/calendar-layout.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var EventCalendar = /*#__PURE__*/function () {
  function EventCalendar(element) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, EventCalendar);
    if (element && typeof element === 'string') {
      this.element = document.querySelector(element.trim());
    } else if (element && element.nodeType) {
      this.element = element;
    } else {
      throw new TypeError('Первый аргумент класса new EventCalendar должен быть Node-узлом или строкой с корректным CSS-селектором.');
    }
    this.calendarLayout = new _calendar_layout__WEBPACK_IMPORTED_MODULE_1__["CalendarLayout"]({
      calendar: new _calendar__WEBPACK_IMPORTED_MODULE_0__["Calendar"]({
        model: [],
        options: settings,
        date: null
      }),
      element: this.element,
      adjuster: void 0
    });
  }
  _createClass(EventCalendar, [{
    key: "nextMonth",
    value: function nextMonth() {
      this.calendarLayout.changeCalendar(this.calendar, 1);
    }
  }, {
    key: "prevMonth",
    value: function prevMonth() {
      this.calendarLayout.changeCalendar(this.calendar, -1);
    }
  }, {
    key: "nextYear",
    value: function nextYear() {
      this.calendarLayout.changeCalendar(this.calendar, 12);
    }
  }, {
    key: "prevYear",
    value: function prevYear() {
      this.calendarLayout.changeCalendar(this.calendar, -12);
    }
  }, {
    key: "goDate",
    value: function goDate(month, year) {
      var currMonth = this.calendarLayout.calendar.selected.month;
      var currYear = this.calendarLayout.calendar.selected.year;
      month = typeof Number(month) === 'number' ? Number(month) : currMonth;
      year = typeof Number(year) === 'number' ? Number(year) : currYear;
      var adj = 0;
      if (month >= currMonth) {
        adj += month - currMonth - 1;
      } else {
        adj += (currMonth - month + 1) * -1;
      }
      if (year >= currYear) {
        adj += (year - currYear) * 12;
      } else {
        adj += (currYear - year) * -12;
      }
      if (isNaN(adj)) {
        return;
      }
      this.calendarLayout.changeCalendar(this.calendarLayout.calendar, adj);
    }
  }, {
    key: "getNewEvents",
    value: function getNewEvents(url) {
      this.calendarLayout.getEvents(url);
    }
  }, {
    key: "setLocale",
    value: function setLocale(code) {
      this.calendarLayout._calendarLocale = code;
      this.calendarLayout.isChangeLocale = true;
      this.calendarLayout.changeCalendar(this.calendarLayout.calendar);
    }
  }]);
  return EventCalendar;
}();

/***/ }),

/***/ "./js/modules/calendar/get-events.js":
/*!*******************************************!*\
  !*** ./js/modules/calendar/get-events.js ***!
  \*******************************************/
/*! exports provided: getCalendarDataEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCalendarDataEvents", function() { return getCalendarDataEvents; });
var getCalendarDataEvents = function getCalendarDataEvents(url, instance) {
  url = url ? url : instance.element.dataset.eventsUrl;
  if (!url) {
    return;
  }
  fetch(url).then(function (res) {
    if (!res.ok) {
      instance.dataLoaded = false;
      instance.changeCalendar(instance.calendar, 0);
      throw new Error("Status: ".concat(res.status));
    }
    return res.json();
  }).then(function (data) {
    instance.calendar.model = data.events;
    instance.element.dispatchEvent(new CustomEvent('loadDataSuccess'));
  });
};

/***/ }),

/***/ "./js/modules/calendar/markup/days.js":
/*!********************************************!*\
  !*** ./js/modules/calendar/markup/days.js ***!
  \********************************************/
/*! exports provided: createDayEventTemplate, createDaysTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDayEventTemplate", function() { return createDayEventTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDaysTemplate", function() { return createDaysTemplate; });
var createDayEventTemplate = function createDayEventTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var href = props.url ? "href=\"".concat(props.url, "\"") : false;
  var tag = href ? 'a' : 'span';
  var title = props.title ? "<span>".concat(props.title, "</span>") : '';
  var body = props.body ? props.body : '';
  return "\n    <".concat(tag, " class=\"event-calendar__event\" ").concat(href, ">\n      ").concat(title, "\n      ").concat(body, "\n    </").concat(tag, ">\n  ");
};
var createDayItemTemplate = function createDayItemTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var isPrev = props.isPrev ? 'event-calendar__day--prev' : '';
  var isNext = props.isNext ? 'event-calendar__day--next' : '';
  var isCurrent = props.isCurrent ? 'event-calendar__day--current' : '';
  var isWeekend = props.isWeekend ? 'event-calendar__day--weekend' : '';
  var isToday = props.isToday ? 'event-calendar__day--today' : '';
  var dayNumber = props.date.getDate() || '';
  return "\n    <li class=\"event-calendar__day ".concat(isPrev, " ").concat(isNext, " ").concat(isCurrent, " ").concat(isWeekend, " ").concat(isToday, "\">\n      <div class=\"event-calendar__day-inner\">\n        <div class=\"event-calendar__number\">\n          ").concat(dayNumber, "\n        </div>\n        <div class=\"event-calendar__events\"></div>\n      </div>\n    </li>\n  ");
};
var createDaysTemplate = function createDaysTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var daysList = props.days;
  return "\n    <ul class=\"event-calendar__days\">\n      ".concat(daysList.map(function (day) {
    return createDayItemTemplate(day).trim();
  }).join(''), "\n    </ul>\n  ");
};

/***/ }),

/***/ "./js/modules/calendar/markup/header.js":
/*!**********************************************!*\
  !*** ./js/modules/calendar/markup/header.js ***!
  \**********************************************/
/*! exports provided: createNavigationBtnTemplate, createHeaderTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNavigationBtnTemplate", function() { return createNavigationBtnTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createHeaderTemplate", function() { return createHeaderTemplate; });
var createNavigationBtnTemplate = function createNavigationBtnTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var mod = arguments.length > 1 ? arguments[1] : undefined;
  var arialabel = props.arialabel ? "aria-label=\"".concat(props.arialabel, "\"") : '';
  var text = props.text ? "<span class=\"event-calendar__nav-btn-text\">".concat(props.text, "</span>") : '';
  var icon = props.icon ? "".concat(props.icon) : '';
  var btnMod = mod ? "event-calendar__nav-btn--".concat(mod) : '';
  return "\n    <button class=\"event-calendar__nav-btn ".concat(btnMod, "\" type=\"button\" ").concat(arialabel, ">\n      ").concat(icon, "\n      ").concat(text, "\n    </button>\n  ");
};
var createMonthYearTemplate = function createMonthYearTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var month = props.month ? "<span class=\"event-calendar__month\">".concat(props.month, "</span>") : '';
  var year = props.year ? "<span class=\"event-calendar__year\">".concat(props.year, "</span>") : '';
  return "\n    <div class=\"event-calendar__current-month\">\n      ".concat(month, "\n      ").concat(year, "\n    </div>\n  ");
};
var createHeaderTemplate = function createHeaderTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var prevBtn = props.navigation.prev ? createNavigationBtnTemplate(props.navigation.prev, 'prev') : '';
  var nextBtn = props.navigation.next ? createNavigationBtnTemplate(props.navigation.next, 'next') : '';
  var monthYear = props.monthYear ? createMonthYearTemplate(props.monthYear) : '';
  return "\n    <div class=\"event-calendar__header\">\n      ".concat(prevBtn, "\n      ").concat(monthYear, "\n      ").concat(nextBtn, "\n    </div>\n  ");
};

/***/ }),

/***/ "./js/modules/calendar/markup/main.js":
/*!********************************************!*\
  !*** ./js/modules/calendar/markup/main.js ***!
  \********************************************/
/*! exports provided: createCalendarTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCalendarTemplate", function() { return createCalendarTemplate; });
var createCalendarTemplate = function createCalendarTemplate() {
  return "\n    <div class=\"event-calendar\">\n      <div class=\"event-calendar__body\">\n        <div class=\"event-calendar__main\">\n        </div>\n      </div>\n    </div>\n  ";
};

/***/ }),

/***/ "./js/modules/calendar/markup/sidebar.js":
/*!***********************************************!*\
  !*** ./js/modules/calendar/markup/sidebar.js ***!
  \***********************************************/
/*! exports provided: createSidebarListTemplate, createSidebarTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSidebarListTemplate", function() { return createSidebarListTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSidebarTemplate", function() { return createSidebarTemplate; });
/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./header */ "./js/modules/calendar/markup/header.js");

var createSidebarItemTemplate = function createSidebarItemTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var index = props.index;
  var label = props.label;
  var currentMod = props.isCurrent && 'event-calendar__month--current';
  var selectedMod = props.isSelected && 'event-calendar__month--selected';
  return "\n    <li class=\"event-calendar__month ".concat(currentMod, " ").concat(selectedMod, "\" data-idx=\"").concat(index, "\" tabindex=\"0\">\n      ").concat(label, "\n    </li>\n  ");
};
var createSidebarListTemplate = function createSidebarListTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var monthsList = props.items;
  return "\n    <ul class=\"event-calendar__months\">\n      ".concat(monthsList.map(function (month) {
    return createSidebarItemTemplate(month).trim();
  }).join(''), "\n    </ul>\n  ");
};
var createSidebarTemplate = function createSidebarTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var prevBtn = props.navigation.prev ? Object(_header__WEBPACK_IMPORTED_MODULE_0__["createNavigationBtnTemplate"])(props.navigation.prev, 'prev') : '';
  var nextBtn = props.navigation.next ? Object(_header__WEBPACK_IMPORTED_MODULE_0__["createNavigationBtnTemplate"])(props.navigation.next, 'next') : '';
  var months = props.months ? "\n    <div class=\"event-calendar__months-wrap\">\n      ".concat(createSidebarListTemplate(props.months), "\n    </div>") : '';
  return "\n    <div class=\"event-calendar__sidebar\">\n      ".concat(prevBtn, "\n      ").concat(months, "\n      ").concat(nextBtn, "\n    </div>\n  ");
};

/***/ }),

/***/ "./js/modules/calendar/markup/weekdays.js":
/*!************************************************!*\
  !*** ./js/modules/calendar/markup/weekdays.js ***!
  \************************************************/
/*! exports provided: createWeekdaysTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createWeekdaysTemplate", function() { return createWeekdaysTemplate; });
var createWeekdayTemplate = function createWeekdayTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var label = props.label || '';
  return "\n    <li class=\"event-calendar__weekday\">\n      ".concat(label, "\n    </li>\n  ");
};
var createWeekdaysTemplate = function createWeekdaysTemplate() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var daysList = props.list;
  return "\n    <ul class=\"event-calendar__weekdays\">\n      ".concat(daysList.map(function (day) {
    return createWeekdayTemplate(day).trim();
  }).join(''), "\n    </ul>\n  ");
};

/***/ }),

/***/ "./js/modules/form-validate/callback.js":
/*!**********************************************!*\
  !*** ./js/modules/form-validate/callback.js ***!
  \**********************************************/
/*! exports provided: callbacks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "callbacks", function() { return callbacks; });
var baseSuccessCallback = function baseSuccessCallback(event) {
  event.preventDefault();
  // В данном колбеке бэкендер, либо разработчик при необходимости будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки или успешную отправку формы на сервер
};

var baseErrorCallback = function baseErrorCallback(event) {
  event.preventDefault();
  // Данный коллбек используется при необходимости выполнить какое-либо действие помимо показа ошибок при попытке отправить неккорректные данные, он не связан с запросами на сервер
};

var callbacks = {
  base: {
    // Сбросс формы
    reset: true,
    // Таймаут сброса формы
    resetTimeout: 500,
    successCallback: baseSuccessCallback,
    errorCallback: baseErrorCallback
  }
};

/***/ }),

/***/ "./js/modules/form-validate/form.js":
/*!******************************************!*\
  !*** ./js/modules/form-validate/form.js ***!
  \******************************************/
/*! exports provided: Form */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Form", function() { return Form; });
/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validator */ "./js/modules/form-validate/validator.js");
/* harmony import */ var _callback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callback */ "./js/modules/form-validate/callback.js");
/* harmony import */ var _init_phone_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./init-phone-input */ "./js/modules/form-validate/init-phone-input.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Form = /*#__PURE__*/function () {
  function Form() {
    _classCallCheck(this, Form);
    this._validator = new _validator__WEBPACK_IMPORTED_MODULE_0__["Validator"]();
    this._initPhoneInput = _init_phone_input__WEBPACK_IMPORTED_MODULE_2__["initPhoneInput"];
    this._callbacks = _callback__WEBPACK_IMPORTED_MODULE_1__["callbacks"];
  }
  _createClass(Form, [{
    key: "_resetSelect",
    value: function _resetSelect(select) {
      var nativeSelect = select.querySelector('select');
      var activeIndex = nativeSelect.options.selectedIndex;
      var selectedOption = nativeSelect.options[activeIndex];
      var buttonText = select.querySelector('.custom-select__text');
      var selectItems = select.querySelectorAll('.custom-select__item');
      buttonText.textContent = selectedOption.textContent;
      selectItems.forEach(function (item, index) {
        if (index === activeIndex - 1) {
          item.setAttribute('aria-selected', 'true');
          return;
        }
        item.setAttribute('aria-selected', 'false');
      });
      if (!nativeSelect.value) {
        select.classList.remove('not-empty');
        select.classList.remove('is-valid');
      }
    }
  }, {
    key: "_resetSelects",
    value: function _resetSelects(form) {
      var _this = this;
      var selects = form.querySelectorAll('[data-select]');
      selects.forEach(function (select) {
        _this._resetSelect(select);
      });
    }
  }, {
    key: "reset",
    value: function reset(form) {
      var _this2 = this;
      form.reset();
      form.querySelectorAll('.is-invalid').forEach(function (item) {
        return item.classList.remove('is-invalid');
      });
      form.querySelectorAll('.is-valid').forEach(function (item) {
        return item.classList.remove('is-valid');
      });
      form.querySelectorAll('.input-message').forEach(function (item) {
        return item.remove();
      });
      setTimeout(function () {
        _this2._resetSelects(form);
      });
    }
  }, {
    key: "initPhoneInput",
    value: function initPhoneInput(parent) {
      this._initPhoneInput(parent);
    }
  }, {
    key: "validateForm",
    value: function validateForm(form) {
      return this._validator.validateForm(form);
    }
  }, {
    key: "validateFormElement",
    value: function validateFormElement(item) {
      return this._validator.validateFormElement(item);
    }
  }, {
    key: "_onFormSubmit",
    value: function _onFormSubmit(event) {
      var _this3 = this;
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (this.validateForm(event.target) && callback) {
        this._callbacks[callback].successCallback(event);
        if (this._callbacks[callback].reset) {
          setTimeout(function () {
            _this3.reset(event.target);
          }, this._callbacks[callback].resetTimeout ? this._callbacks[callback].resetTimeout : 500);
        }
        return;
      }
      if (!this.validateForm(event.target) && callback) {
        this._callbacks[callback].errorCallback(event);
        return;
      }
    }
  }, {
    key: "_onFormInput",
    value: function _onFormInput(item) {
      this.validateFormElement(item);
    }
  }, {
    key: "_initValidate",
    value: function _initValidate(parent) {
      var _this4 = this;
      var form = parent.querySelector('form');
      if (!form) {
        return;
      }
      var phoneParents = form.querySelectorAll('[data-validate-type="phone"]');
      phoneParents.forEach(function (item) {
        return _this4._initPhoneInput(item);
      });
      var callback = parent.dataset.callback;
      form.noValidate = true;
      form.addEventListener('submit', function (event) {
        event.preventDefault();
        _this4._onFormSubmit(event, callback);
      });
      form.addEventListener('input', function (event) {
        _this4._onFormInput(event.target);
      });
      form.addEventListener('reset', function (event) {
        _this4.reset(event.target);
      });
    }
  }, {
    key: "init",
    value: function init() {
      var _this5 = this;
      this._validateParent = document.querySelectorAll('[data-form-validate]');
      if (!this._validateParent.length) {
        return;
      }
      this._validateParent.forEach(function (parent) {
        return _this5._initValidate(parent);
      });
    }
  }]);
  return Form;
}();

/***/ }),

/***/ "./js/modules/form-validate/init-phone-input.js":
/*!******************************************************!*\
  !*** ./js/modules/form-validate/init-phone-input.js ***!
  \******************************************************/
/*! exports provided: initPhoneInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPhoneInput", function() { return initPhoneInput; });
var BASE_COUNTRY_CODE = '+7';
var BASE_MATRIX = ' (___) ___ __ __';
var phoneLength = BASE_COUNTRY_CODE.length + BASE_MATRIX.length;
var onInputPhoneInput = function onInputPhoneInput(_ref) {
  var target = _ref.target;
  var matrix = "".concat(BASE_COUNTRY_CODE).concat(BASE_MATRIX);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = target.value.replace(/\D/g, '');
  if (def.length >= val.length) {
    val = def;
  }
  target.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};
var onFocusPhoneInput = function onFocusPhoneInput(_ref2) {
  var target = _ref2.target;
  if (!target.value) {
    target.value = BASE_COUNTRY_CODE;
  }
  target.addEventListener('input', onInputPhoneInput);
  target.addEventListener('blur', onBlurPhoneInput);
  target.addEventListener('keydown', onKeydownPhoneInput);
};
var onKeydownPhoneInput = function onKeydownPhoneInput(e) {
  if (e.target.selectionStart === 1 && e.keyCode === 8 || e.keyCode === 46) {
    e.preventDefault();
  }
  if (e.target.selectionStart <= phoneLength && e.keyCode !== 8 && e.keyCode !== 46 && e.keyCode !== 37 && e.keyCode !== 39) {
    e.target.setSelectionRange(phoneLength, phoneLength);
  }
};
var onBlurPhoneInput = function onBlurPhoneInput(_ref3) {
  var target = _ref3.target;
  if (target.value === BASE_COUNTRY_CODE) {
    var parent = target.closest('[data-validate-type="phone"]');
    target.value = '';
    if (!parent.hasAttribute('data-required')) {
      parent.classList.remove('is-valid');
      parent.classList.remove('is-invalid');
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
    }
    parent.classList.remove('not-empty');
    target.removeEventListener('input', onInputPhoneInput);
    target.removeEventListener('blur', onBlurPhoneInput);
  }
};
var initPhoneInput = function initPhoneInput(parent) {
  var input = parent.querySelector('input');
  parent.dataset.phoneLength = phoneLength;
  input.addEventListener('focus', onFocusPhoneInput);
};

/***/ }),

/***/ "./js/modules/form-validate/matrix.js":
/*!********************************************!*\
  !*** ./js/modules/form-validate/matrix.js ***!
  \********************************************/
/*! exports provided: matrixReplace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matrixReplace", function() { return matrixReplace; });
var matrixReplace = function matrixReplace(item, matrix, RegEx) {
  if (!matrix) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат матрицы: data-matrix=""');
    item.value = '';
    return;
  }
  if (!RegEx) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат ограничений: data-matrix-limitations=""');
    item.value = '';
    return;
  }
  var def = matrix.replace(RegEx, '');
  var val = item.value.replace(RegEx, '');
  var i = 0;
  if (def.length >= val.length) {
    val = def;
  }
  item.value = matrix.replace(/./g, function (a) {
    if (/[_\^]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

/***/ }),

/***/ "./js/modules/form-validate/regular-expression.js":
/*!********************************************************!*\
  !*** ./js/modules/form-validate/regular-expression.js ***!
  \********************************************************/
/*! exports provided: getLimitationsRegEx, getMatrixLimitationsRegEx, getMailRegEx */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLimitationsRegEx", function() { return getLimitationsRegEx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatrixLimitationsRegEx", function() { return getMatrixLimitationsRegEx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMailRegEx", function() { return getMailRegEx; });
var setLimitationError = function setLimitationError(limitation) {
  // eslint-disable-next-line no-console
  console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F(data-limitation=\"".concat(limitation, "\") - \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439."));
};
var getLimitationsRegEx = function getLimitationsRegEx(limitation) {
  switch (limitation) {
    case 'digit':
      return /[^\d]/g;
    case 'name':
      return /[^a-zA-Zа-яёА-ЯЁ\-\s]/g;
    case 'letters':
      return /[^a-zA-Zа-яёА-ЯЁ\s]/g;
    case 'letters-and-digit':
      return /[^a-zA-Zа-яёА-ЯЁ\s\d]/g;
    case 'cyrillic':
      return /[^а-яёА-ЯЁ\s]/g;
    case 'latin':
      return /[^a-zA-Z\s]/g;
    default:
      return setLimitationError(limitation);
  }
};
var getMatrixLimitationsRegEx = function getMatrixLimitationsRegEx(matrix) {
  switch (matrix) {
    case 'digit':
      return /[^\d]/g;
    case 'name':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\-]]/g;
    case 'letters':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z]/g;
    case 'letters-and-digit':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\d]/g;
    case 'cyrillic':
      return /[^\а-яё\А-ЯЁ]/g;
    case 'latin':
      return /[^\a-z\A-Z]/g;
    default:
      return false;
  }
};
var getMailRegEx = function getMailRegEx() {
  return /[a-zA-Zа-яёА-ЯЁ0-9]{1}([a-zA-Zа-яёА-ЯЁ0-9\-_\.]{1,})?@[a-zA-Zа-яёА-ЯЁ0-9\-]{1}([a-zA-Zа-яёА-ЯЁ0-9.\-]{1,})?[a-zA-Zа-яёА-ЯЁ0-9\-]{1}\.[a-zA-Zа-яёА-ЯЁ]{2,6}/;
};

/***/ }),

/***/ "./js/modules/form-validate/render-message.js":
/*!****************************************************!*\
  !*** ./js/modules/form-validate/render-message.js ***!
  \****************************************************/
/*! exports provided: Message */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Message", function() { return Message; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Message = /*#__PURE__*/function () {
  function Message() {
    _classCallCheck(this, Message);
    this._baseErrorText = 'Это поле является обязательным';
    this._invalidMessageClass = 'input-message--invalid';
    this._validMessageClass = 'input-message--valid';
  }
  _createClass(Message, [{
    key: "_messageTemplate",
    value: function _messageTemplate(message, state) {
      var cssClass = state === 'valid' ? 'input-message--valid' : 'input-message--invalid';
      return "<span class=\"input-message ".concat(cssClass, "\">").concat(message, "</span>");
    }
  }, {
    key: "removeMessage",
    value: function removeMessage(parent) {
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
    }
  }, {
    key: "renderMessage",
    value: function renderMessage(parent, message, state) {
      this.removeMessage(parent);
      parent.insertAdjacentHTML('beforeend', this._messageTemplate(message, state));
    }
  }]);
  return Message;
}();

/***/ }),

/***/ "./js/modules/form-validate/validator.js":
/*!***********************************************!*\
  !*** ./js/modules/form-validate/validator.js ***!
  \***********************************************/
/*! exports provided: Validator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Validator", function() { return Validator; });
/* harmony import */ var _regular_expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regular-expression */ "./js/modules/form-validate/regular-expression.js");
/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./matrix */ "./js/modules/form-validate/matrix.js");
/* harmony import */ var _render_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render-message */ "./js/modules/form-validate/render-message.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Validator = /*#__PURE__*/function () {
  function Validator() {
    _classCallCheck(this, Validator);
    this._getLimitationsRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getLimitationsRegEx"];
    this._getMatrixLimitationsRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getMatrixLimitationsRegEx"];
    this._getMailRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getMailRegEx"];
    this._matrixReplace = _matrix__WEBPACK_IMPORTED_MODULE_1__["matrixReplace"];
    this._message = new _render_message__WEBPACK_IMPORTED_MODULE_2__["Message"]();
  }
  _createClass(Validator, [{
    key: "_renderMessage",
    value: function _renderMessage(trigger, parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      if (!trigger) {
        parent.classList.add('is-invalid');
        if (parent.hasAttribute('data-message-base') && !input.value) {
          this._message.renderMessage(parent, parent.dataset.messageBase, 'invalid');
        } else if (parent.hasAttribute('data-message-extra') && input.value) {
          this._message.renderMessage(parent, parent.dataset.messageExtra, 'invalid');
        } else if (!parent.hasAttribute('data-message-extra') && parent.hasAttribute('data-message-base') && input.value) {
          this._message.renderMessage(parent, parent.dataset.messageBase, 'invalid');
        } else {
          this._message.removeMessage(parent);
        }
      } else {
        if (parent.hasAttribute('data-message-success')) {
          this._message.renderMessage(parent, parent.dataset.messageSuccess, 'valid');
        } else {
          this._message.removeMessage(parent);
        }
      }
    }
  }, {
    key: "_setItemValidState",
    value: function _setItemValidState(parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      parent.classList.add('is-valid');
      parent.classList.remove('is-invalid');
      input.setAttribute('aria-invalid', 'false');
      this._message.removeMessage(parent);
    }
  }, {
    key: "_setItemInvalidState",
    value: function _setItemInvalidState(parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      parent.classList.remove('is-valid');
      input.setAttribute('aria-invalid', 'true');
    }
  }, {
    key: "_simpleLimitation",
    value: function _simpleLimitation(item, limitation) {
      item.value = item.value.replace(this._getLimitationsRegEx(limitation), '');
    }
  }, {
    key: "_matrixLimitation",
    value: function _matrixLimitation(item, matrix, limitation) {
      this._matrixReplace(item, matrix, limitation);
    }
  }, {
    key: "_validateTextInput",
    value: function _validateTextInput(parent, input) {
      var flag = true;
      if (input.value.length >= (+input.getAttribute('minlength') || 2)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateMatrixInput",
    value: function _validateMatrixInput(parent, input) {
      var flag = true;
      if (input.value.length === input.closest('[data-matrix]').dataset.matrix.length) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateEmailInput",
    value: function _validateEmailInput(parent, input) {
      var flag = true;
      if (new RegExp(this._getMailRegEx(), '').test(input.value)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validatePhoneInput",
    value: function _validatePhoneInput(parent, input) {
      var flag = true;
      if (input.value.length >= +parent.dataset.phoneLength) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateCheckbox",
    value: function _validateCheckbox(parent, input) {
      var flag = true;
      if (input.checked) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_findSelectedOption",
    value: function _findSelectedOption(options) {
      var flag = false;
      options.forEach(function (option) {
        if (option.value && option.selected) {
          flag = true;
        }
      });
      return flag;
    }
  }, {
    key: "_validateSelect",
    value: function _validateSelect(parent, input) {
      var options = input.querySelectorAll('option');
      var customSelectText = parent.querySelector('.custom-select__text');
      input.setAttribute('aria-invalid', 'false');
      var flag = true;
      if (this._findSelectedOption(options)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        parent.classList.remove('not-empty');
        customSelectText.innerHTML = '';
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_returnCheckedElements",
    value: function _returnCheckedElements(inputs) {
      var flag = false;
      inputs.forEach(function (input) {
        if (input.checked) {
          flag = true;
        }
      });
      return flag;
    }
  }, {
    key: "_removeGroupAria",
    value: function _removeGroupAria(inputs) {
      inputs.forEach(function (input) {
        if (!input.checked) {
          input.removeAttribute('aria-required');
          input.removeAttribute('aria-invalid');
        } else {
          input.setAttribute('aria-required', true);
          input.setAttribute('aria-invalid', false);
        }
      });
    }
  }, {
    key: "_setGroupAria",
    value: function _setGroupAria(inputs) {
      inputs.forEach(function (input) {
        input.setAttribute('aria-required', true);
        input.setAttribute('aria-invalid', true);
      });
    }
  }, {
    key: "_validateToggleGroup",
    value: function _validateToggleGroup(parent) {
      var formElements = parent.querySelectorAll('input');
      var flag = true;
      if (this._returnCheckedElements(formElements)) {
        this._removeGroupAria(formElements);
        parent.classList.remove('is-invalid');
        parent.classList.add('is-valid');
        this._message.removeMessage(parent);
      } else {
        this._setGroupAria(formElements);
        parent.classList.remove('is-valid');
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_customExample",
    value: function _customExample(parent, input) {
      var flag = true;
      if (!input.value.length) {
        parent.dataset.messageBase = 'Поле обязательно к заполнению';
        this._setItemInvalidState(parent, input);
        flag = false;
      } else if (input.value.length < input.minLength) {
        parent.dataset.messageBase = "\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C \u0432\u0432\u0435\u0441\u0442\u0438 \u0435\u0449\u0451 ".concat(input.minLength - input.value.length, " \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432");
        this._setItemInvalidState(parent, input);
        flag = false;
      } else if (input.value.length > input.minLength) {
        parent.dataset.messageBase = "\u0412\u044B \u0432\u0432\u0435\u043B\u0438 ".concat(input.value.length - input.minLength, " \u043B\u0438\u0448\u043D\u0438\u0445 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432");
        this._setItemInvalidState(parent, input);
        flag = false;
      } else {
        parent.dataset.messageSuccess = 'Поле заполнено корректно';
        this._setItemValidState(parent, input);
        flag = true;
      }
      return flag;
    }
  }, {
    key: "_validateFile",
    value: function _validateFile(parent, input) {
      var flag = true;
      var sizeTest = parent.dataset.maxSize && input.files[0] ? input.files[0].size < +parent.dataset.maxSize : true;
      if (input.value && sizeTest) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateInput",
    value: function _validateInput(type, parent, input) {
      switch (type) {
        case 'text':
          return this._validateTextInput(parent, input);
        case 'matrix':
          return this._validateMatrixInput(parent, input);
        case 'email':
          return this._validateEmailInput(parent, input);
        case 'phone':
          return this._validatePhoneInput(parent, input);
        case 'checkbox':
          return this._validateCheckbox(parent, input);
        case 'select':
          return this._validateSelect(parent, input);
        case 'toggle-group':
          return this._validateToggleGroup(parent, input);
        case 'file':
          return this._validateFile(parent, input);
        case 'custom-example':
          return this._customExample(parent, input);
        default:
          return false;
      }
    }
  }, {
    key: "validateFormElement",
    value: function validateFormElement(formElement) {
      var fullValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var parent = formElement.closest('[data-validate-type]');
      if (!parent) {
        return;
      }
      if (!parent.hasAttribute('data-required')) {
        var removeElement = parent.querySelector('input') || parent.querySelector('select') || parent.querySelector('textarea');
        if (!removeElement.value) {
          parent.classList.remove('is-valid');
          parent.classList.remove('is-invalid');
        }
      }
      var onInputValidate = parent.hasAttribute('data-on-input-validate');
      if (parent.hasAttribute('data-limitation')) {
        this._simpleLimitation(formElement, parent.dataset.limitation);
      }
      if (parent.dataset.validateType === 'matrix') {
        this._matrixLimitation(formElement, parent.dataset.matrix, this._getMatrixLimitationsRegEx(parent.dataset.matrixLimitation));
      }
      var isValid = this._validateInput(parent.dataset.validateType, parent, formElement);
      if (onInputValidate || fullValidate) {
        this._renderMessage(isValid, parent, formElement);
      }
    }
  }, {
    key: "_fullValidate",
    value: function _fullValidate(items) {
      var _this = this;
      var result = true;
      items.forEach(function (item) {
        var formElement = item.querySelector('input') || item.querySelector('select') || item.querySelector('textarea');
        _this.validateFormElement(formElement, true);
        if (item.classList.contains('is-invalid')) {
          result = false;
        }
      });
      return result;
    }
  }, {
    key: "validateForm",
    value: function validateForm(form) {
      var validateItems = form.querySelectorAll('[data-validate-type]');
      var result = this._fullValidate(validateItems);
      return result;
    }
  }]);
  return Validator;
}();

/***/ }),

/***/ "./js/modules/init-event-calendar.js":
/*!*******************************************!*\
  !*** ./js/modules/init-event-calendar.js ***!
  \*******************************************/
/*! exports provided: initEventCalendar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initEventCalendar", function() { return initEventCalendar; });
/* harmony import */ var _calendar_event_calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar/event-calendar.js */ "./js/modules/calendar/event-calendar.js");

var initEventCalendar = function initEventCalendar() {
  var calendarElement = document.querySelector('[data-event-calendar]');
  if (!calendarElement) {
    return;
  }

  // eslint-disable-next-line no-unused-vars
  var calendar = new _calendar_event_calendar_js__WEBPACK_IMPORTED_MODULE_0__["EventCalendar"](calendarElement);
  window.EventCalendar = calendar;
};


/***/ }),

/***/ "./js/modules/modals/init-modals.js":
/*!******************************************!*\
  !*** ./js/modules/modals/init-modals.js ***!
  \******************************************/
/*! exports provided: modals, initModals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modals", function() { return modals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initModals", function() { return initModals; });
/* harmony import */ var _modals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals */ "./js/modules/modals/modals.js");

var modals;

// Здесь реализован пример открытия модалки через колбэк закрытия
// const openModalInCloseCallback = (name, context = this) => {
//   context._enableScrolling = false;
//   context._setSettings('default');
//   modals.open(name);
// };

// closeCallback() {
//   openModalInCloseCallback('modal-5');
// },

var settings = {
  'default': {
    preventDefault: true,
    stopPlay: true,
    lockFocus: true,
    startFocus: true,
    focusBack: true,
    eventTimeout: 400,
    openCallback: false,
    closeCallback: false
  }
};
var initModals = function initModals() {
  var modalElements = document.querySelectorAll('.modal');
  if (modalElements.length) {
    modalElements.forEach(function (el) {
      setTimeout(function () {
        el.classList.remove('modal--preload');
      }, 100);
    });
  }
  modals = new _modals__WEBPACK_IMPORTED_MODULE_0__["Modals"](settings);
  // Используйте в разработке экспортируемую переменную modals, window сделан для бэкэнда
  window.modals = modals;
};


/***/ }),

/***/ "./js/modules/modals/modals.js":
/*!*************************************!*\
  !*** ./js/modules/modals/modals.js ***!
  \*************************************/
/*! exports provided: Modals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modals", function() { return Modals; });
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/scroll-lock */ "./js/utils/scroll-lock.js");
/* harmony import */ var _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/focus-lock */ "./js/utils/focus-lock.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Modals = /*#__PURE__*/function () {
  function Modals() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Modals);
    this._scrollLock = new _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["ScrollLock"]();
    this._focusLock = new _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__["FocusLock"]();
    this._modalOpenElements = document.querySelectorAll('[data-open-modal]');
    this._stackModalElements = [];
    this._openedModalElement = null;
    this._modalName = null;
    this._enableScrolling = true;
    this._settingKey = 'default';
    this._settings = settings;
    this._preventDefault = this._settings[this._settingKey].preventDefault;
    this._stopPlay = this._settings[this._settingKey].stopPlay;
    this._lockFocus = this._settings[this._settingKey].lockFocus;
    this._startFocus = this._settings[this._settingKey].startFocus;
    this._focusBack = this._settings[this._settingKey].focusBack;
    this._eventTimeout = this._settings[this._settingKey].eventTimeout;
    this._resetScrollPos = this._settings[this._settingKey].resetScrollPos;
    this._openCallback = this._settings[this._settingKey].openCallback;
    this._closeCallback = this._settings[this._settingKey].closeCallback;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._modalClickHandler = this._modalClickHandler.bind(this);
    this._init();
  }
  _createClass(Modals, [{
    key: "_init",
    value: function _init() {
      if (this._modalOpenElements.length) {
        document.addEventListener('click', this._documentClickHandler);
      }
    }
  }, {
    key: "_setSettings",
    value: function _setSettings() {
      var settingKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._settingKey;
      if (!this._settings[settingKey]) {
        return;
      }
      this._preventDefault = typeof this._settings[settingKey].preventDefault === 'boolean' ? this._settings[settingKey].preventDefault : this._settings[this._settingKey].preventDefault;
      this._stopPlay = typeof this._settings[settingKey].stopPlay === 'boolean' ? this._settings[settingKey].stopPlay : this._settings[this._settingKey].stopPlay;
      this._lockFocus = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].lockFocus : this._settings[this._settingKey].lockFocus;
      this._startFocus = typeof this._settings[settingKey].startFocus === 'boolean' ? this._settings[settingKey].startFocus : this._settings[this._settingKey].startFocus;
      this._focusBack = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].focusBack : this._settings[this._settingKey].focusBack;
      this._resetScrollPos = typeof this._settings[settingKey].resetScrollPos === 'boolean' ? this._settings[settingKey].resetScrollPos : this._settings[this._settingKey].resetScrollPos;
      this._eventTimeout = typeof this._settings[settingKey].eventTimeout === 'number' ? this._settings[settingKey].eventTimeout : this._settings[this._settingKey].eventTimeout;
      this._openCallback = this._settings[settingKey].openCallback || this._settings[this._settingKey].openCallback;
      this._closeCallback = this._settings[settingKey].closeCallback || this._settings[this._settingKey].closeCallback;
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-open-modal]')) {
        return;
      }
      evt.preventDefault();
      this._modalName = target.closest('[data-open-modal]').dataset.openModal;
      if (!this._modalName) {
        return;
      }
      this.open();
    }
  }, {
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var isEscKey = evt.key === 'Escape' || evt.key === 'Esc';
      if (isEscKey) {
        evt.preventDefault();
        this.close(document.querySelector('.modal.is-active').dataset.modal);
      }
    }
  }, {
    key: "_modalClickHandler",
    value: function _modalClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-close-modal]')) {
        return;
      }
      if (target.closest('[data-close-modal="back"]')) {
        this.back();
      } else {
        this.close(target.closest('[data-modal]').dataset.modal);
        this._stackModalElements = [];
      }
    }
  }, {
    key: "_addListeners",
    value: function _addListeners(modal) {
      modal.addEventListener('click', this._modalClickHandler);
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_removeListeners",
    value: function _removeListeners(modal) {
      modal.removeEventListener('click', this._modalClickHandler);
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_stopInteractive",
    value: function _stopInteractive(modal) {
      if (this._stopPlay) {
        modal.querySelectorAll('video, audio').forEach(function (el) {
          return el.pause();
        });
        modal.querySelectorAll('[data-iframe]').forEach(function (el) {
          el.querySelector('iframe').contentWindow.postMessage('{"event": "command", "func": "pauseVideo", "args": ""}', '*');
        });
      }
    }
  }, {
    key: "_autoPlay",
    value: function _autoPlay(modal) {
      modal.querySelectorAll('[data-iframe]').forEach(function (el) {
        var autoPlay = el.closest('[data-auto-play]');
        if (autoPlay) {
          el.querySelector('iframe').contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        }
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      if (!modal || modal.classList.contains('is-active')) {
        return;
      }
      document.removeEventListener('click', this._documentClickHandler);
      this._openedModalElement = document.querySelector('.modal.is-active');
      if (this._openedModalElement) {
        this._enableScrolling = false;
        this.close(this._openedModalElement.dataset.modal);
      }
      this._setSettings(modalName);
      modal.classList.add('is-active');
      if (modalName !== this._stackModalElements[this._stackModalElements.length - 1]) {
        this._stackModalElements.push(modalName);
      }
      if (!this._openedModalElement) {
        this._scrollLock.disableScrolling();
      }
      if (this._openCallback) {
        this._openCallback();
      }
      if (this._lockFocus) {
        this._focusLock.lock('.modal.is-active', this._startFocus);
      }
      if (this._resetScrollPos) {
        modal.scrollTo(0, 0);
      }
      setTimeout(function () {
        _this._addListeners(modal);
        _this._autoPlay(modal);
        document.addEventListener('click', _this._documentClickHandler);
      }, this._eventTimeout);
    }
  }, {
    key: "back",
    value: function back() {
      if (!this._stackModalElements.length) {
        return;
      }
      var activeModal = this._stackModalElements[this._stackModalElements.length - 1];
      var prevModal = this._stackModalElements[this._stackModalElements.length - 2];
      if (this._stackModalElements.length === 1) {
        this._stackModalElements = [];
      }
      if (prevModal) {
        this._stackModalElements.pop();
        this.open(prevModal);
      }
      this.close(activeModal);
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      document.removeEventListener('click', this._documentClickHandler);
      if (!modal || !modal.classList.contains('is-active')) {
        return;
      }
      if (this._lockFocus) {
        this._focusLock.unlock(this._focusBack);
      }
      modal.classList.remove('is-active');
      this._removeListeners(modal);
      this._stopInteractive(modal);
      if (this._closeCallback) {
        this._closeCallback();
      }
      if (this._enableScrolling) {
        setTimeout(function () {
          _this2._scrollLock.enableScrolling();
        }, this._eventTimeout);
      }
      setTimeout(function () {
        document.addEventListener('click', _this2._documentClickHandler);
      }, this._eventTimeout);
      this._setSettings('default');
      this._enableScrolling = true;
    }
  }]);
  return Modals;
}();

/***/ }),

/***/ "./js/modules/select/create-select-markup.js":
/*!***************************************************!*\
  !*** ./js/modules/select/create-select-markup.js ***!
  \***************************************************/
/*! exports provided: createNativeSelectMarkup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNativeSelectMarkup", function() { return createNativeSelectMarkup; });
var createNativeOptionsMarkup = function createNativeOptionsMarkup(items, activeIndex) {
  return items.map(function (el, index) {
    if (activeIndex.length) {
      var currentIndex = activeIndex.find(function (item) {
        return item === index;
      });
      if (currentIndex === index) {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', " selected>").concat(el.text ? "".concat(el.text) : '', "</option>");
      } else {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
      }
    } else {
      return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
    }
  }).join('\n');
};
var createNativeSelectMarkup = function createNativeSelectMarkup(_ref) {
  var id = _ref.id,
    items = _ref.items,
    multiple = _ref.multiple,
    name = _ref.name,
    required = _ref.required,
    _ref$activeIndex = _ref.activeIndex,
    activeIndex = _ref$activeIndex === void 0 ? [] : _ref$activeIndex;
  return "<select ".concat(id ? "id='".concat(id, "'") : '', " ").concat(name ? "name='".concat(name, "'") : '', " ").concat(multiple ? 'multiple' : '', " ").concat(required ? 'required' : '', " tabindex=\"-1\" aria-hidden=\"true\">\n            <option value=\"\"></option>\n            ").concat(createNativeOptionsMarkup(items, activeIndex), "\n          </select>");
};

/***/ }),

/***/ "./js/modules/select/custom-select.js":
/*!********************************************!*\
  !*** ./js/modules/select/custom-select.js ***!
  \********************************************/
/*! exports provided: CustomSelect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomSelect", function() { return CustomSelect; });
/* harmony import */ var _utils_render__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/render */ "./js/utils/render.js");
/* harmony import */ var _create_select_markup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create-select-markup */ "./js/modules/select/create-select-markup.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var CustomSelect = /*#__PURE__*/function () {
  function CustomSelect() {
    _classCallCheck(this, CustomSelect);
    this._selects = null;
    this._selectElement = null;
    this._activeIndex = null;
    this._onDocumentClick = this._onDocumentClick.bind(this);
    this._onEscapePress = this._onEscapePress.bind(this);
    this._onSelectItemClick = this._onSelectItemClick.bind(this);
    this._onSelectItemKeydown = this._onSelectItemKeydown.bind(this);
    this._onLastItemKeydown = this._onLastItemKeydown.bind(this);
    this._onSelectClick = this._onSelectClick.bind(this);
    this._onSelectKeydown = this._onSelectKeydown.bind(this);
    window.selectInit = this.init.bind(this);
  }
  _createClass(CustomSelect, [{
    key: "_createMultiString",
    value: function _createMultiString(arr) {
      var str = '';
      if (arr.length) {
        if (arr.length === 1) {
          str = arr[0].innerHTML;
        } else {
          arr.forEach(function (element, index) {
            if (index === arr.length - 1) {
              str += element.innerHTML;
            } else {
              str += "".concat(element.innerHTML, ", ");
            }
          });
        }
      }
      return str;
    }
  }, {
    key: "_setSelectActiveState",
    value: function _setSelectActiveState(multiple, insert, item) {
      var buttonTextBlock = item.querySelector('.custom-select__text');
      var activeItems = item.querySelectorAll('.custom-select__item[aria-selected="true"]');
      var label = item.querySelector('.custom-select__label');
      var str = this._createMultiString(activeItems);
      buttonTextBlock.style.transition = '0s';
      if (label) {
        label.style.transition = '0s';
      }
      setTimeout(function () {
        if (label) {
          label.style.transition = null;
        }
        buttonTextBlock.style.transition = null;
      }, 300);
      if (multiple && insert) {
        item.classList.add('not-empty');
        buttonTextBlock.innerHTML = str;
      } else if (multiple) {
        return;
      } else {
        item.classList.add('not-empty');
        buttonTextBlock.innerHTML = activeItems[0].innerHTML;
      }
    }
  }, {
    key: "_closeSelect",
    value: function _closeSelect() {
      var activeSelect = document.querySelector('[data-select].is-open');
      document.removeEventListener('click', this._onDocumentClick);
      document.removeEventListener('keydown', this._onEscapePress);
      if (activeSelect) {
        activeSelect.classList.remove('is-open');
      }
    }
  }, {
    key: "_onSelectElementClickAction",
    value: function _onSelectElementClickAction(element, index) {
      var parent = element.closest('.custom-select');
      var multiple = parent.dataset.multiple;
      var insert = parent.dataset.insert;
      var buttonTextBlock = parent.querySelector('.custom-select__text');
      var itemText = element.textContent;
      var options = parent.querySelectorAll('option');
      var select = parent.querySelector('select');
      var changeEv = new CustomEvent('change');
      var inputEv = new CustomEvent('input');
      select.dispatchEvent(changeEv);
      select.dispatchEvent(inputEv);
      var form = select.closest('form');
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
      if (form) {
        var formChangeEv = new CustomEvent('change');
        var formInputEv = new CustomEvent('input');
        form.dispatchEvent(formChangeEv);
        form.dispatchEvent(formInputEv);
      }
      if (multiple) {
        if (insert === 'true') {
          if (element.getAttribute('aria-selected') === 'true') {
            element.setAttribute('aria-selected', 'false');
            var activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');
            var str = this._createMultiString(activeItems);
            options[index + 1].selected = false;
            buttonTextBlock.innerText = str;
            if (!str) {
              parent.classList.remove('not-empty');
              parent.classList.remove('is-valid');
            }
          } else {
            element.setAttribute('aria-selected', 'true');
            var _activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');
            var _str = this._createMultiString(_activeItems);
            buttonTextBlock.innerText = _str;
            parent.classList.add('not-empty');
            parent.classList.add('is-valid');
            options[index + 1].selected = true;
          }
        } else {
          if (element.getAttribute('aria-selected') === 'true') {
            element.setAttribute('aria-selected', 'false');
            options[index + 1].selected = false;
          } else {
            element.setAttribute('aria-selected', 'true');
            options[index + 1].selected = true;
          }
        }
      } else {
        var activeItem = parent.querySelector('.custom-select__item[aria-selected="true"]');
        if (element.getAttribute('aria-selected') === 'true') {
          this._closeSelect();
        } else {
          if (activeItem) {
            activeItem.setAttribute('aria-selected', 'false');
            parent.classList.remove('not-empty');
            parent.classList.remove('is-valid');
          }
          buttonTextBlock.innerText = itemText;
          element.setAttribute('aria-selected', 'true');
          parent.classList.add('not-empty');
          parent.classList.add('is-valid');
          options[index + 1].selected = true;
          this._closeSelect();
        }
      }
    }
  }, {
    key: "_onDocumentClick",
    value: function _onDocumentClick(_ref) {
      var target = _ref.target;
      if (!target.closest('.custom-select')) {
        this._closeSelect();
      }
    }
  }, {
    key: "_onEscapePress",
    value: function _onEscapePress(evt) {
      var isEscape = evt.key === 'Escape';
      if (isEscape) {
        this._closeSelect();
      }
    }
  }, {
    key: "_onSelectItemClick",
    value: function _onSelectItemClick(element, index) {
      this._onSelectElementClickAction(element, index);
    }
  }, {
    key: "_onSelectItemKeydown",
    value: function _onSelectItemKeydown(evt, element, index) {
      var isEnter = evt.key === 'Enter';
      if (isEnter) {
        this._onSelectElementClickAction(element, index);
      }
    }
  }, {
    key: "_onLastItemKeydown",
    value: function _onLastItemKeydown(evt) {
      var isTab = evt.key === 'Tab';
      if (isTab) {
        this._closeSelect();
      }
    }
  }, {
    key: "_onSelectClick",
    value: function _onSelectClick(evt) {
      var parent = evt.target.closest('[data-select]');
      var activeSelect = document.querySelector('[data-select].is-open');
      parent.classList.remove('is-invalid');
      if (activeSelect && activeSelect === parent) {
        activeSelect.classList.remove('is-open');
        return;
      }
      if (activeSelect) {
        this._closeSelect();
      }
      document.addEventListener('click', this._onDocumentClick);
      document.addEventListener('keydown', this._onEscapePress);
      if (parent.classList.contains('is-open')) {
        parent.classList.remove('is-open');
      } else {
        parent.classList.add('is-open');
      }
    }
  }, {
    key: "_onSelectKeydown",
    value: function _onSelectKeydown(evt) {
      var parent = evt.target.closest('[data-select]');
      parent.classList.remove('is-invalid');
      if (evt.shiftKey && evt.key === 'Tab' && parent.closest('.is-open')) {
        this._closeSelect();
      }
    }
  }, {
    key: "_setActiveSelectItemsState",
    value: function _setActiveSelectItemsState(multiple, selectItems) {
      var _this = this;
      var flag = true;
      this._activeIndex = [];
      selectItems.forEach(function (item, index) {
        if (multiple) {
          if (item.getAttribute('aria-selected') === 'true') {
            _this._activeIndex.push(index);
          }
        } else {
          if (item.getAttribute('aria-selected') === 'true' && flag) {
            _this._activeIndex.push(index);
            flag = false;
          } else {
            item.setAttribute('aria-selected', 'false');
          }
        }
      });
    }
  }, {
    key: "_createSelectStructure",
    value: function _createSelectStructure(item) {
      var nativeSelect = item.querySelector('select');
      if (nativeSelect) {
        this._selectElement = null;
        return;
      }
      var options = {};
      options.items = [];
      var multiple = item.dataset.multiple;
      var id = item.dataset.id;
      var name = item.dataset.name;
      var required = item.dataset.required;
      var insert = item.dataset.insert;
      var selectItems = item.querySelectorAll('.custom-select__item');
      this._setActiveSelectItemsState(multiple, selectItems);
      if (this._activeIndex.length) {
        options.activeIndex = this._activeIndex;
        this._setSelectActiveState(multiple, insert, item);
      }
      options.name = name || false;
      options.id = id || false;
      options.required = Boolean(required);
      options.multiple = Boolean(multiple);
      selectItems.forEach(function (selectItem) {
        var value = selectItem.dataset.selectValue;
        var itemInfo = {};
        itemInfo.text = selectItem.textContent;
        itemInfo.value = value;
        options.items.push(itemInfo);
      });
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_0__["renderElement"])(item, Object(_utils_render__WEBPACK_IMPORTED_MODULE_0__["createElement"])(Object(_create_select_markup__WEBPACK_IMPORTED_MODULE_1__["createNativeSelectMarkup"])(options)));
      this._selectElement = item;
      this._activeIndex = null;
    }
  }, {
    key: "_setSelectAction",
    value: function _setSelectAction() {
      var _this2 = this;
      if (!this._selectElement) {
        return;
      }
      var button = this._selectElement.querySelector('.custom-select__button');
      var selectItems = this._selectElement.querySelectorAll('.custom-select__item');
      button.addEventListener('click', this._onSelectClick);
      button.addEventListener('keydown', this._onSelectKeydown);
      selectItems.forEach(function (element, index) {
        element.addEventListener('click', function () {
          _this2._onSelectItemClick(element, index);
        });
        element.addEventListener('keydown', function (evt) {
          _this2._onSelectItemKeydown(evt, element, index);
        });
        if (index === selectItems.length - 1) {
          element.addEventListener('keydown', _this2._onLastItemKeydown);
        }
      });
    }
  }, {
    key: "init",
    value: function init() {
      var _this3 = this;
      this._selects = document.querySelectorAll('[data-select]');
      this._selects.forEach(function (select) {
        _this3._createSelectStructure(select);
        _this3._setSelectAction();
      });
    }
  }]);
  return CustomSelect;
}();

/***/ }),

/***/ "./js/utils/focus-lock.js":
/*!********************************!*\
  !*** ./js/utils/focus-lock.js ***!
  \********************************/
/*! exports provided: FocusLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusLock", function() { return FocusLock; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SELECTORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
var FocusLock = /*#__PURE__*/function () {
  function FocusLock() {
    _classCallCheck(this, FocusLock);
    this._lockedSelector = null;
    this._focusableElements = null;
    this._endElement = null;
    this._selectors = SELECTORS;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
  }
  _createClass(FocusLock, [{
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var activeElement = document.activeElement;
      if (evt.key === 'Tab') {
        if (!this._focusableElements.length) {
          evt.preventDefault();
          activeElement.blur();
          return;
        }
        if (this._focusableElements.length === 1) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
        if (this._focusableElements.length > 1 && !activeElement.closest(this._lockedSelector)) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
      }
      if (evt.key === 'Tab' && !evt.shiftKey && activeElement === this._focusableElements[this._focusableElements.length - 1]) {
        evt.preventDefault();
        this._focusableElements[0].focus();
      }
      if (evt.key === 'Tab' && evt.shiftKey && activeElement === this._focusableElements[0]) {
        evt.preventDefault();
        this._focusableElements[this._focusableElements.length - 1].focus();
      }
    }
  }, {
    key: "lock",
    value: function lock(lockedSelector) {
      var startFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unlock();
      this._lockedSelector = lockedSelector;
      var lockedElement = document.querySelector(this._lockedSelector);
      if (!lockedElement) {
        return;
      }
      this._focusableElements = lockedElement.querySelectorAll(this._selectors);
      this._endElement = document.activeElement;
      var startElement = lockedElement.querySelector('[data-focus]') || this._focusableElements[0];
      if (this._endElement) {
        this._endElement.blur();
      }
      if (startElement && startFocus) {
        startElement.focus();
      }
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "unlock",
    value: function unlock() {
      var returnFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this._endElement && returnFocus) {
        this._endElement.focus();
      }
      this._lockedSelector = null;
      this._focusableElements = null;
      this._endElement = null;
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }]);
  return FocusLock;
}();
window.focusLock = new FocusLock();

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/ios-vh-fix.js":
/*!********************************!*\
  !*** ./js/utils/ios-vh-fix.js ***!
  \********************************/
/*! exports provided: iosVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosVhFix", function() { return iosVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");

var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if (Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};


/***/ }),

/***/ "./js/utils/render.js":
/*!****************************!*\
  !*** ./js/utils/render.js ***!
  \****************************/
/*! exports provided: createElement, renderElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderElement", function() { return renderElement; });
var createElement = function createElement(template) {
  var newElement = document.createElement('div');
  newElement.innerHTML = template;
  return newElement.firstElementChild;
};
var renderElement = function renderElement(container, component) {
  var place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'beforeend';
  switch (place) {
    case 'afterbegin':
      container.prepend(component);
      break;
    case 'afterend':
      container.after(component);
      break;
    case 'beforebegin':
      container.before(component);
      break;
    case 'beforeend':
      container.append(component);
      break;
  }
};

/***/ }),

/***/ "./js/utils/scroll-lock.js":
/*!*********************************!*\
  !*** ./js/utils/scroll-lock.js ***!
  \*********************************/
/*! exports provided: ScrollLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollLock", function() { return ScrollLock; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var ScrollLock = /*#__PURE__*/function () {
  function ScrollLock() {
    _classCallCheck(this, ScrollLock);
    this._iosChecker = _ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"];
    this._lockClass = this._iosChecker() ? 'scroll-lock-ios' : 'scroll-lock';
    this._scrollTop = null;
    this._fixedBlockElements = document.querySelectorAll('[data-fix-block]');
  }
  _createClass(ScrollLock, [{
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      return window.innerWidth - document.documentElement.clientWidth;
    }
  }, {
    key: "_getBodyScrollTop",
    value: function _getBodyScrollTop() {
      return self.pageYOffset || document.documentElement && document.documentElement.ScrollTop || document.body && document.body.scrollTop;
    }
  }, {
    key: "disableScrolling",
    value: function disableScrolling() {
      var _this = this;
      this._scrollTop = document.body.dataset.scroll = document.body.dataset.scroll ? document.body.dataset.scroll : this._getBodyScrollTop();
      if (this._getScrollbarWidth()) {
        document.body.style.paddingRight = "".concat(this._getScrollbarWidth(), "px");
        this._fixedBlockElements.forEach(function (block) {
          block.style.paddingRight = "".concat(_this._getScrollbarWidth(), "px");
        });
      }
      document.body.style.top = "-".concat(this._scrollTop, "px");
      document.body.classList.add(this._lockClass);
    }
  }, {
    key: "enableScrolling",
    value: function enableScrolling() {
      document.body.classList.remove(this._lockClass);
      window.scrollTo(0, +document.body.dataset.scroll);
      document.body.style.paddingRight = null;
      document.body.style.top = null;
      this._fixedBlockElements.forEach(function (block) {
        block.style.paddingRight = null;
      });
      document.body.removeAttribute('data-scroll');
      this._scrollTop = null;
    }
  }]);
  return ScrollLock;
}();
window.scrollLock = new ScrollLock();

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map